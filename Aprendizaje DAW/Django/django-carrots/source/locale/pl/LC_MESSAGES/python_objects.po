# 
msgid ""
msgstr ""
"Project-Id-Version: Django Carrots 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-01-02 22:02+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/python_objects.rst:3
msgid "Objects and classes"
msgstr ""

#: ../../source/python_objects.rst:5
msgid ""
"In fact, this chapter could be the subject of a series of workshops, but we "
"will focus on the most basic things, which we will need while working with "
"Django."
msgstr ""

#: ../../source/python_objects.rst:9
msgid "Every value is an object"
msgstr ""

#: ../../source/python_objects.rst:11
msgid ""
"Everything that we have called a value until now can be called “an object” "
"in the world of Python. We saw it in the example of integers, when "
":func:`help` printed for us dozens of additional lines of information about "
":func:`int`."
msgstr ""

#: ../../source/python_objects.rst:16
msgid "Every object has a class"
msgstr ""

#: ../../source/python_objects.rst:18
msgid ""
"The class is the type of an object. To know what is the class of an object, "
"simply use the function :func:`type`:"
msgstr ""

#: ../../source/python_objects.rst:33
msgid ""
"We have talked about classes you can see here earlier: ``int``, ``float``, "
"``str``, ``tuple``."
msgstr ""

#: ../../source/python_objects.rst:35
msgid ""
"When we use numbers in our program, we expect that it will behave like a "
"number - we rely on our intuition."
msgstr ""

#: ../../source/python_objects.rst:38
msgid ""
"However, Python has to know exactly what it means to be a number, e.g., what"
" should happen when we sum up two numbers and what when we divide them. The "
"class ``int`` provides all this information and even more."
msgstr ""

#: ../../source/python_objects.rst:42
msgid ""
"By using :func:`help` , check what the class ``str`` gives us. Here we give "
"just a few interesting features:"
msgstr ""

#: ../../source/python_objects.rst:80
msgid ""
"All these are operations that each string can do. We can get to them by "
"using dots and calling the function:"
msgstr ""

#: ../../source/python_objects.rst:91
msgid ""
"And one more important function of a class - it can create a new object of "
"the type it describes. This is called called \"an instance\" of a class:"
msgstr ""

#: ../../source/python_objects.rst:103
msgid ""
"So an instance is a new, fresh, value of the type described by the class."
msgstr ""

#: ../../source/python_objects.rst:105
msgid ""
"In summary, we've looked at the classes :func:`int`, :func:`str`, "
":func:`tuple` and :func:`list`. To find out from which class is the value "
"(object), we use the function :func:`type`. To create an instance of a class"
" (a new object), we call the class like call a function, by using "
"parentheses ``()``. For instance: ``int()``."
msgstr ""

#: ../../source/python_objects.rst:112
msgid "Define classes"
msgstr ""

#: ../../source/python_objects.rst:114
msgid ""
"Classes like ``int`` or ``str`` are already known to Python, but we can "
"create our own classes to customize their behavior. This is called defining "
"a class."
msgstr ""

#: ../../source/python_objects.rst:117
msgid ""
"You can define your class as easy as you can define a function. In fact, a "
"class is basically nothing but a group of functions. Lets define a class "
"named ``Dog``:"
msgstr ""

#: ../../source/python_objects.rst:134
msgid ""
"Classes begin with the word :keyword:`class`, after which we give the name "
"of the new class. The ``(object)`` indicates that our new type ``Dog`` is a "
"specific sub-type of ``object``. That is, instances of our class, i.e. "
"values created from it, will be of the type ``Dog`` but also of the more "
"general type ``object``."
msgstr ""

#: ../../source/python_objects.rst:139
msgid ""
"Actually this is what we said that every value is an object. Indeed, each "
"class is a specialization of ``object`` in Python. Hence, every value always"
" has ``object`` as most general type."
msgstr ""

#: ../../source/python_objects.rst:143
msgid ""
"However, it is worth to know that every function in the class must have at "
"least one argument. Its value is an object from which we have called this "
"function (that is to say the object placed before the dot). This first "
"argument should be called ``self`` by convention. In our example we have one"
" function called ``bark`` (as you can see it accepts exacly one argument), "
"lets test haw it works:"
msgstr ""

#: ../../source/python_objects.rst:157
msgid ""
"This argument can be named as you wish, but the `most widespread convention "
"<https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments>`_ "
"is to call it ``self``."
msgstr ""

#: ../../source/python_objects.rst:163
msgid "Attributes of objects"
msgstr ""

#: ../../source/python_objects.rst:165
msgid ""
"Besides methods (functions defined inside class) the objects can also have "
"attributes:"
msgstr ""

#: ../../source/python_objects.rst:178
msgid ""
"Sometimes we want for every object of the class to have an attribute, such "
"as every dog should have a name. We can add this requirement by adding a "
"function with a special name ``__init__``::"
msgstr ""

#: ../../source/python_objects.rst:189
msgid ""
"In function ``__init__`` we have assigned a value to new attribute ``name`` "
"on ``self``. As mentioned eariler ``self`` is a actual object of class "
"``Dog``. Now we can use this attribute in other methods:"
msgstr ""

#: ../../source/python_objects.rst:212
msgid ""
"This :func:`__init__` function is called during the creation of an object. "
"We call this special function a constructor, because it helps to build the "
"object. In this example it accepts two arguments: ``self`` and ``name``, but"
" when we create an instance of class ``Dog`` we need to provide only "
"``name`` arguemnt. ``self`` is always filled automatically by Python."
msgstr ""

#: ../../source/python_objects.rst:219
msgid "Inheritance"
msgstr ""

#: ../../source/python_objects.rst:221
msgid ""
"In previous chapter we created a ``Dog`` class that was subtype of "
"``object``, but this is not the only possible case. We can for example say "
"that that ``Dog`` is also an ``Animal``::"
msgstr ""

#: ../../source/python_objects.rst:235
msgid ""
"Here we have created new class, ``Animal``, that inherits from ``object``. "
"``Dog`` class now inherits from ``Animal``. In other terms:"
msgstr ""

#: ../../source/python_objects.rst:238
msgid "every Animal is an object"
msgstr ""

#: ../../source/python_objects.rst:239
msgid "every Dog is an Animal and every Dog is an object"
msgstr ""

#: ../../source/python_objects.rst:241
msgid ""
"This way we can put some general behaviour in ``Animal`` class, like "
"walking, and leave dog specific behaviour in ``Dog`` class::"
msgstr ""

#: ../../source/python_objects.rst:249
msgid ""
"Method ``run`` will be available in all subtypes of ``Animal`` (including "
"``Dog``)::"
msgstr ""
